version: '3.8'

services:
  mongodb:
    image: mongo:4.4
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
  

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app-network


  redis:
    image: redis
    container_name: redis-container
    ports:
      - "6379:6379"
    networks:
      - app-network
    command: ["redis-server", "--bind", "0.0.0.0"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
  

  db:
    image: postgres:17
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: fastapi_db
    ports:
      - "5432:5432"  # Mapeia a porta 5432 do container para a porta 5432 do host
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Volume persistente para armazenar dados do PostgreSQL
    networks:
      - app-network


  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"  # Mapeia a porta 80 do container para a porta 8080 do host
    depends_on:
      - db  # Garante que o serviço db esteja em execução antes de iniciar o pgAdmin
    networks:
      - app-network


  app:
    build:
      context: .  # Caminho para o diretório onde está o seu Dockerfile
      dockerfile: Dockerfile  # Se você tiver um nome de Dockerfile diferente, pode especificá-lo aqui
    container_name: my-app
    networks:
      - app-network
    ports:
      - "8000:8000"  # Mapeando a porta 8000 do container para a 8000 do host
    volumes:
      - ./core:/src/core  # Mapeando o código fonte da aplicação do host para o container
      - ./core/Backend/uploads:/scr/core/Backend/uploads
      - ./core/Backend/logs:/scr/logs # espelha os logs 
    depends_on:
      - db
      - redis
      - mongodb
    restart: unless-stopped  # Garantir que o container reinicie automaticamente se falhar


networks:
  app-network:
    driver: bridge


volumes:
  postgres_data:  # Define o volume persistente para o PostgreSQL
  mongodb_data:
